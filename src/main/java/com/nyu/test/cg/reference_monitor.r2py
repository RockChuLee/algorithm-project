"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

# create the lock for the global
mycontext['lock'] = createlock()


class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    mycontext['lock'].acquire(True)

    # if the file exists, just open it and replace B with whatever is in A
    if self.Afn in listfiles():
      self.Afile = openfile(self.Afn, create)
      self.Bfile = openfile(self.Bfn, create)
      self.Bfile.writeat(self.Afile.readat(None, 0), 0)

    else:
      # if the file does not exist, create when the create is true
      if create:
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.Afile.writeat('SE', 0)
      else:
        raise FileNotFoundError


  def writeat(self,data,offset):

    flength = len(self.Bfile.readat(None, 0))

    if offset < 0:
      raise RepyArgumentError
    elif offset > flength:
      raise SeekPastEndOfFileError
    else:
    # Write the requested data to the B file using the sandbox's writeat call
      self.Bfile.writeat(data,offset)
  

  
  def readat(self,bytes,offset):

    flength = len(self.Afile.readat(None,0))
    if offset < 0 or flength < 0:
      raise RepyArgumentError
    elif offset > flength:
      raise SeekPastEndOfFileError
    elif bytes != None and bytes > flength:
      raise SeekPastEndOfFileError
    else:
      # Read from the A file using the sandbox's readat...
      data = self.Afile.readat(bytes,offset)
      return data
      
    

  def close(self):
    # get the data from the file after writen before close
    data = self.Bfile.readat(None, 0)
    backup = self.Afile.readat(None, 0)
    if data.startswith("S") and data.endswith("E"):

      # write valid data into backup
      # since i don't know which part is edited
      # i have to write to a new file
      
      self.Afile.close()
      self.Bfile.close()

      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(data, 0)
      self.Afile.close()

    else:

      # data is not valid, discard data
      # and restore back up
      self.Afile.close()
      self.Bfile.close()

      removefile(self.Bfn)
      self.Bfile = openfile(self.Bfn, True)
      self.Bfile.writeat(backup, 0)
      self.Bfile.close()

    mycontext['lock'].release()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()